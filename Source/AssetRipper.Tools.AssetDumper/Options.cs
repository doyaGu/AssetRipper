using CommandLine;
using CommandLine.Text;

namespace AssetRipper.Tools.AssetDumper;

internal class Options
{
	[Option('i', "input", Required = true,
		HelpText = "Input path to Unity game directory")]
	public string InputPath { get; set; } = "";

	[Option('o', "output", Required = false, Default = "./output",
		HelpText = "Output directory for extracted data")]
	public string OutputPath { get; set; } = "./output";

	[Option("bundles", Required = false, Default = true,
		HelpText = "Export asset bundles")]
	public bool ExportBundles { get; set; } = true;

	[Option("collections", Required = false, Default = true,
		HelpText = "Export asset collections (Resources, Addressables, etc.)")]
	public bool ExportCollections { get; set; } = true;

	[Option("scenes", Required = false, Default = true,
		HelpText = "Export scene hierarchy and asset data")]
	public bool ExportScenes { get; set; } = true;

	[Option("script-metadata", Required = false, Default = true,
		HelpText = "Export script metadata")]
	public bool ExportScriptMetadata { get; set; } = true;

	[Option("assemblies", Required = false, Default = false,
		HelpText = "Export raw assembly DLL files")]
	public bool ExportAssemblies { get; set; } = true;

	[Option('s', "scripts", Required = false, Default = false,
		HelpText = "Export decompiled C# scripts")]
	public bool ExportScripts { get; set; } = true;

	[Option('a', "ast", Required = false, Default = false,
		HelpText = "Generate AST from decompiled scripts")]
	public bool GenerateAst { get; set; } = true;

	[Option('v', "verbose", Required = false, Default = false,
		HelpText = "Enable verbose logging output")]
	public bool Verbose { get; set; }

	[Option('q', "quiet", Required = false, Default = false,
		HelpText = "Enable silent mode (minimal output)")]
	public bool Silent { get; set; }

	[Option('c', "compact", Required = false, Default = false,
		HelpText = "Generate compact JSON output (no indentation)")]
	public bool CompactJson { get; set; }

	[Option("ignore-nulls", Required = false, Default = true,
		HelpText = "Ignore null values in JSON output")]
	public bool IgnoreNullValues { get; set; } = true;

	[Option("include-metadata", Required = false, Default = false,
		HelpText = "Include additional metadata in asset exports")]
	public bool IncludeAssetMetadata { get; set; }

	[Option("ast-folder", Required = false, Default = "AST",
		HelpText = "Name of folder for AST output")]
	public string AstOutputFolder { get; set; } = "AST";

	[Option("scenes-folder", Required = false, Default = "Scenes",
		HelpText = "Name of folder for scene output")]
	public string ScenesOutputFolder { get; set; } = "Scenes";

	[Option("scene-filter", Required = false,
		HelpText = "Regex pattern to filter scenes to export")]
	public string? SceneFilter { get; set; }

	[Option("assembly-filter", Required = false,
		HelpText = "Regex pattern to filter assemblies for processing")]
	public string? AssemblyFilter { get; set; }

	[Option('e', "exclude", Required = false,
		HelpText = "Regex pattern to exclude files from processing")]
	public string? ExcludePattern { get; set; }

	[Option("skip-auto-generated", Required = false, Default = true,
		HelpText = "Skip auto-generated files (AssemblyInfo.cs, etc.)")]
	public bool SkipAutoGenerated { get; set; } = true;

	[Option("max-file-size", Required = false, Default = 1048576,
		HelpText = "Maximum file size in bytes for processing (0 = unlimited)")]
	public long MaxFileSizeBytes { get; set; } = 1048576;

	[Option("incremental", Required = false, Default = true,
		HelpText = "Skip processing if outputs already exist")]
	public bool IncrementalProcessing { get; set; } = true;

	[Option("sample-rate", Required = false, Default = 1.0,
		HelpText = "Sample rate for processing files (0.1 = 10%, 1.0 = 100%)")]
	public double SampleRate { get; set; } = 1.0;

	[Option("unity-only", Required = false, Default = false,
		HelpText = "Process only Unity project files (skip third-party libraries)")]
	public bool UnityProjectOnly { get; set; } = false;

	[Option("min-lines", Required = false, Default = 3,
		HelpText = "Minimum lines of code to process for AST")]
	public int MinimumLines { get; set; } = 3;

	[Option("preview-only", Required = false, Default = false,
		HelpText = "Preview what would be processed without creating files")]
	public bool PreviewOnly { get; set; } = false;

	[Option("parallel-degree", Required = false, Default = 0,
		HelpText = "Degree of parallelism for processing (0 = auto, 1 = sequential)")]
	public int ParallelDegree { get; set; } = 0;

	[Option("file-timeout", Required = false, Default = 30,
		HelpText = "Timeout in seconds for processing individual files")]
	public int FileTimeoutSeconds { get; set; } = 30;

	[Usage(ApplicationAlias = "AssetDumper")]
	public static IEnumerable<Example> Examples
	{
		get
		{
			return new List<Example>
			{
				new Example("Basic extraction", new Options {
					InputPath = @"C:\Games\MyUnityGame",
					OutputPath = @"C:\Output"
				}),
				new Example("Fast processing with sampling", new Options {
					InputPath = @"C:\Games\MyUnityGame",
					SampleRate = 0.3,
					UnityProjectOnly = true
				}),
				new Example("Main assembly only", new Options {
					InputPath = @"C:\Games\MyUnityGame",
					AssemblyFilter = "Assembly-CSharp"
				}),
				new Example("Scripts and metadata only", new Options {
					InputPath = @"C:\Games\MyUnityGame",
					ExportScenes = false,
					ExportScriptMetadata = true,
					ExportScripts = true
				}),
				new Example("Preview mode", new Options {
					InputPath = @"C:\Games\MyUnityGame",
					PreviewOnly = true,
					Verbose = true
				}),
				new Example("Silent mode", new Options {
					InputPath = @"C:\Games\MyUnityGame",
					Silent = true
				}),
				new Example("Sequential processing for debugging", new Options {
					InputPath = @"C:\Games\MyUnityGame",
					ParallelDegree = 1,
					FileTimeoutSeconds = 60
				})
			};
		}
	}
}
